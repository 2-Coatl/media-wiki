#!/usr/bin/env bash
set -euo pipefail

mostrar_ayuda() {
  cat <<'AYUDA'
Uso: pre_push [-h] [--min-coverage <porcentaje>]

Hook de Git ejecutado antes de enviar commits al remoto. Dispara la
pipeline de calidad (linters, pruebas y cobertura) y verifica que la
cobertura mínima configurada se cumpla.

Opciones:
  -h, --help                Muestra esta ayuda y termina.
      --min-coverage NUM    Umbral mínimo de cobertura (por defecto 80).

Variables de entorno:
  QUALITY_PIPELINE_CMD      Comando alternativo que reemplaza la ejecución
                            por defecto de infrastructure/quality/ejecutar_validaciones.sh.
  PRE_PUSH_MIN_COVERAGE     Umbral mínimo por defecto cuando no se pasa la
                            opción --min-coverage.
AYUDA
}

MIN_COVERAGE="${PRE_PUSH_MIN_COVERAGE:-80}"

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      mostrar_ayuda
      exit 0
      ;;
    --min-coverage)
      shift
      if [[ $# -eq 0 ]]; then
        echo "Error: --min-coverage requiere un valor." >&2
        exit 1
      fi
      MIN_COVERAGE="$1"
      shift
      ;;
    *)
      echo "Error: argumento desconocido $1" >&2
      mostrar_ayuda >&2
      exit 1
      ;;
  esac
done

if [[ $# -ne 0 ]]; then
  echo "Error: pre_push no acepta argumentos posicionales." >&2
  exit 1
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PIPELINE_DEFAULT="${SCRIPT_DIR}/../quality/ejecutar_validaciones.sh"

if [[ -n "${QUALITY_PIPELINE_CMD:-}" ]]; then
  read -r -a PIPELINE_CMD <<< "${QUALITY_PIPELINE_CMD}"
else
  PIPELINE_CMD=("${PIPELINE_DEFAULT}")
fi

export QUALITY_MIN_COVERAGE="$MIN_COVERAGE"

echo "[pre_push] Ejecutando pipeline de calidad (cobertura mínima ${MIN_COVERAGE}%)."
if "${PIPELINE_CMD[@]}"; then
  echo "[pre_push] Pipeline completada con éxito."
  exit 0
fi

echo "[pre_push] Error: la pipeline de calidad reportó fallos." >&2
exit 1
