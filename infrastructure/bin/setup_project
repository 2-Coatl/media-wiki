#!/bin/bash
# Inicializa la estructura del proyecto con soporte para pruebas

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEFAULT_PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
PROJECT_ROOT="${PROJECT_ROOT_OVERRIDE:-$DEFAULT_PROJECT_ROOT}"

DRY_RUN=0

usage() {
    cat <<'EOF'
Uso: setup_project [opciones]

Opciones:
  --dry-run    Muestra las acciones sin aplicarlas.
  -h, --help   Muestra esta ayuda.
EOF
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run)
                DRY_RUN=1
                shift
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                echo "[ERROR] Opción desconocida: $1"
                usage
                exit 1
                ;;
        esac
    done
}

create_directories() {
    if [[ $DRY_RUN -eq 1 ]]; then
        echo "[DRY-RUN] Creación de directorios en $PROJECT_ROOT"
        return 0
    fi

    echo "Creating directory structure..."

    mkdir -p "$PROJECT_ROOT/infrastructure/bin"
    mkdir -p "$PROJECT_ROOT/infrastructure/config"
    mkdir -p "$PROJECT_ROOT/infrastructure/utils"
    mkdir -p "$PROJECT_ROOT/infrastructure/installation"
    mkdir -p "$PROJECT_ROOT/infrastructure/security"
    mkdir -p "$PROJECT_ROOT/infrastructure/migration"
    mkdir -p "$PROJECT_ROOT/infrastructure/validation"
    mkdir -p "$PROJECT_ROOT/infrastructure/git_hooks"
    mkdir -p "$PROJECT_ROOT/infrastructure/quality"
    mkdir -p "$PROJECT_ROOT/infrastructure/deploy"
    mkdir -p "$PROJECT_ROOT/vagrant/provisioners"
    mkdir -p "$PROJECT_ROOT/infrastructure/tests/unit"
    mkdir -p "$PROJECT_ROOT/infrastructure/tests/integration"
    mkdir -p "$PROJECT_ROOT/infrastructure/tests/smoke"
    mkdir -p "$PROJECT_ROOT/docs"
    mkdir -p "$PROJECT_ROOT/backups"

    echo "[OK] Directories created"
}

generate_secrets() {
    local _secrets="$PROJECT_ROOT/infrastructure/config/secrets.env"

    if [[ $DRY_RUN -eq 1 ]]; then
        echo "[DRY-RUN] Generación de secrets.env"
        return 0
    fi

    if [[ "${SETUP_PROJECT_SKIP_SECRETS:-0}" == "1" ]]; then
        echo "[INFO] Saltando generación de secretos por configuración"
        return 0
    fi

    if [[ -f "$_secrets" ]]; then
        if [[ "${SETUP_PROJECT_FORCE_REGENERATE:-0}" == "1" ]]; then
            _confirm="y"
        else
            echo "Secrets file already exists"
            read -p "Regenerate? (y/N): " _confirm
        fi
        if [[ "$_confirm" != "y" ]] && [[ "$_confirm" != "Y" ]]; then
            echo "Skipping secrets generation"
            return 0
        fi
    fi

    if [[ -x "$SCRIPT_DIR/generate_secrets" ]]; then
        echo "Generating secrets..."
        bash "$SCRIPT_DIR/generate_secrets"
    else
        echo "[WARN] generate_secrets script not found or not executable"
    fi
}

make_executable() {
    if [[ $DRY_RUN -eq 1 ]]; then
        echo "[DRY-RUN] Ajuste de permisos de ejecución"
        return 0
    fi

    echo "Making infrastructure scripts executable..."

    find "$PROJECT_ROOT/infrastructure/bin" -type f -exec chmod +x {} \; 2>/dev/null || true
    find "$PROJECT_ROOT/infrastructure" -type f -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true

    echo "[OK] Infrastructure scripts are executable"
}

create_gitignore() {
    local _gitignore="$PROJECT_ROOT/.gitignore"

    if [[ $DRY_RUN -eq 1 ]]; then
        echo "[DRY-RUN] Creación de .gitignore"
        return 0
    fi

    if [[ -f "$_gitignore" ]]; then
        echo "[OK] .gitignore already exists"
        return 0
    fi

    cat > "$_gitignore" << 'EOF'
# Secrets
infrastructure/config/secrets.env

# Vagrant
.vagrant/
*.log

# MediaWiki runtime
wiki/LocalSettings.php
wiki/cache/
wiki/images/

# Backups
backups/
*.sql
*.tar.gz
*.backup

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
desktop.ini

# Temporary
*.tmp
*~
EOF

    echo "[OK] .gitignore created"
}

create_readme() {
    local _readme="$PROJECT_ROOT/README.md"

    if [[ $DRY_RUN -eq 1 ]]; then
        echo "[DRY-RUN] Creación de README.md"
        return 0
    fi

    if [[ -f "$_readme" ]]; then
        echo "[OK] README.md already exists"
        return 0
    fi

    cat > "$_readme" << 'EOF'
# MediaWiki Production Lab

Production-ready MediaWiki deployment with Vagrant.

## Quick Start

```bash
./infrastructure/bin/validate_host
./infrastructure/bin/setup_project
./infrastructure/bin/setup_trunk_based
bash infrastructure/deploy/deploy-vagrant.sh
```

## Requirements

- VirtualBox 6.0+
- Vagrant 2.2+
- 8GB RAM minimum
- 50GB disk space

## Documentation

See `docs/` directory.
EOF

    echo "[OK] README.md created"
}

main() {
    parse_args "$@"

    echo "==> Setting up project"

    create_directories
    create_gitignore
    create_readme
    generate_secrets
    make_executable

    echo ""
    if [[ $DRY_RUN -eq 1 ]]; then
        echo "[DRY-RUN] Proyecto configurado (sin cambios aplicados)"
    else
        echo "[OK] Project setup complete"
        echo ""
        echo "Next steps:"
        echo "  1. Review infrastructure/config/secrets.env"
        echo "  2. Run: ./infrastructure/bin/validate_host"
        echo "  3. Run: ./infrastructure/bin/setup_trunk_based"
        echo ""
    fi
}

main "$@"
